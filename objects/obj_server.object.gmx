<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Client Info List
clients = ds_map_create();
clientInfo = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Buffers
infoBuffer = buffer_create(256, buffer_grow, 1);
pingBuffer = buffer_create(2, buffer_fast, 1);
readyBuffer = buffer_create(1, buffer_fast, 1);
spawnBuffer = buffer_create(9, buffer_fixed, 1);
updateBuffer = buffer_create(256, buffer_grow, 1);
endBuffer = buffer_create(256, buffer_grow, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup Server

//Create socket
socketID = network_create_server( network_socket_udp, PORT, 4 );

// Ask for name
serverName = get_string("Enter your name.", "Steve");
if(string_lettersdigits(serverName)!=serverName){
    show_message("Your name can only contain letters and digits!");
    serverName = "";
}
if(serverName==""){
    room_goto(rm_mainMenu);
    network_destroy(socketID);
    instance_destroy();
    exit;
}
serverName = serverName;
serverReady = false;
state = LOBBY;
serverIP = "Host";
http_get( "http://ipv4bot.whatismyipaddress.com/" );
              
// Send new Client List to everyone
event_user(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>updateStepTime</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>room_speed/10</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy DS and Buffers
ds_list_destroy(clientInfo);
for(var address=ds_map_find_first(clients);!is_undefined(address);address=ds_map_find_next(clients, address)){
    ds_map_destroy(clients[? address]);
}
ds_map_destroy(clients);
network_destroy(socketID);
buffer_delete(infoBuffer);
buffer_delete(pingBuffer);
buffer_delete(readyBuffer);
buffer_delete(spawnBuffer);
buffer_delete(updateBuffer);
buffer_delete(endBuffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send Updates to Clients holding all player and ball info
buffer_seek(updateBuffer, buffer_seek_start, 0);
buffer_write(updateBuffer, buffer_u8, UPDATE);

//Write the ball info
buffer_write(updateBuffer, buffer_u16, instance_number(obj_ball));
for(var i=0;i&lt;instance_number(obj_ball);i++){
    var ball = instance_find(obj_ball, i);
    buffer_write(updateBuffer, buffer_f32, ball.x);
    buffer_write(updateBuffer, buffer_f32, ball.y);
    buffer_write(updateBuffer, buffer_f32, ball.hspeed);
    buffer_write(updateBuffer, buffer_f32, ball.vspeed);
    buffer_write(updateBuffer, buffer_u8, ball.damage);
}

//Write the player info
var playerID = 0;
buffer_write(updateBuffer, buffer_u8, numPlayers);
//Write the server player
if(!serverPlayerDead){
    if(instance_exists(serverPlayer)){
        buffer_write(updateBuffer, buffer_u8, playerID);
        buffer_write(updateBuffer, buffer_u8, serverPlayer.hitPoints);
        buffer_write(updateBuffer, buffer_f32, serverPlayer.x);
        buffer_write(updateBuffer, buffer_f32, serverPlayer.y);
        buffer_write(updateBuffer, buffer_f32, serverPlayer.hspeed);
        buffer_write(updateBuffer, buffer_f32, serverPlayer.vspeed);
        buffer_write(updateBuffer, buffer_f32, serverPlayer.fuel);
        buffer_write(updateBuffer, buffer_u8, serverPlayer.image_index);
        buffer_write(updateBuffer, buffer_bool, serverPlayer.moveDir);
    }
    else{
        serverPlayerDead = true;
        numPlayers--;
    }
}
playerID++;
//Write the client players
for(var address=ds_map_find_first(clients);!is_undefined(address);address=ds_map_find_next(clients, address)){
    var client = clients[? address];
    if(!client[? "dead"]){
        var player = client[? "player"];
        buffer_write(updateBuffer, buffer_u8, playerID);
        buffer_write(updateBuffer, buffer_u8, player.hitPoints);
        buffer_write(updateBuffer, buffer_f32, player.x);
        buffer_write(updateBuffer, buffer_f32, player.y);
        var name = player.name;
        buffer_write(updateBuffer, buffer_f32, player.hspeed);
        buffer_write(updateBuffer, buffer_f32, player.vspeed);
        buffer_write(updateBuffer, buffer_f32, player.fuel);
        buffer_write(updateBuffer, buffer_u8, player.image_index);
        buffer_write(updateBuffer, buffer_bool, player.moveDir);
    }
    playerID++;
}

//Send all the data to the clients
scr_sendMessageUdpAll(clients, updateBuffer);

//Update again &amp; again &amp; again...
if(state==GAME)
    alarm[2] = updateStepTime;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup Multiplayer Map

//Get spawn points
var spawns = ds_list_create();
for(var i=0;i&lt;instance_number(obj_spawnPoint);i++)
    ds_list_add(spawns, instance_find(obj_spawnPoint, i));
ds_list_shuffle(spawns);

//Spawn server Player
var num = 0;
var player = instance_create(spawns[|num].x, spawns[|num].y, obj_playerClient);
var slot = obj_gamepadControl.controller;
if(!gamepad_is_connected(slot))
    player.gamepadSlot = 0;
else
    player.gamepadSlot = slot;
player.name = serverName ;
player.num = num;
serverPlayer = player;
serverPlayerDead = false;
numPlayers = 1;

//Spawn each player to a random spawn point
for(var address=ds_map_find_first(clients);!is_undefined(address);address=ds_map_find_next(clients, address)){
    num++;
    player = instance_create(spawns[|num].x, spawns[|num].y, obj_playerNetwork);
    var client = clients[? address];
    client[? "player"] = player;
    client[? "dead"] = false;
    player.name = client[? "name"] ;
    player.num = num;
    numPlayers++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send setup to clients
for(var address=ds_map_find_first(clients);!is_undefined(address);address=ds_map_find_next(clients, address)){
    var client = clients[? address];
    buffer_seek(spawnBuffer, buffer_seek_start, 0);
    buffer_write(spawnBuffer, buffer_u8, SPAWN);
    buffer_write(spawnBuffer, buffer_u32, room);
    buffer_write(spawnBuffer, buffer_u16, client[? "player"].x);
    buffer_write(spawnBuffer, buffer_u16, client[? "player"].y);
    scr_sendMessageUdp(address, spawnBuffer);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start sending Updates
alarm[2] = 1;
state = GAME;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ping clients to make sure they are still there.

//Set Ping variables for all clients
var disconnect = ds_list_create();
for(var address=ds_map_find_first(clients);!is_undefined(address);address=ds_map_find_next(clients, address)){
    var client = clients[? address];
    
    //Check for no response and timeout
    if(!client[? "ping"])
        if(++client[? "pingFail"]&gt;=PING_TIMEOUT)
            ds_list_add(disconnect, address);
    
    //Set ping variables
    client[? "pingStart"] = current_time;
    client[? "ping"] = false;
}

//Handle the disconnected clients (remove client and update lists)
for(var i=0;i&lt;ds_list_size(disconnect);i++){
    var address = disconnect[| i];
    var client = clients[? address];
    if(state==GAME){
        client[? "dead"] = true;
        with(client[? "player"]) 
            instance_destroy();
        numPlayers--;
    }
    ds_map_destroy(client);
    ds_map_delete(clients, disconnect[| i]);
}
ds_list_destroy(disconnect);

//Send Ping message to all clients
buffer_seek(pingBuffer, buffer_seek_start, 0);
buffer_write(pingBuffer, buffer_u8, PING );
buffer_write(pingBuffer, buffer_u8, 0 );
scr_sendMessageUdpAll(clients, pingBuffer);
alarm[0] = room_speed;

// Update the Client list for ping values
event_user(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Simple Ping
if(async_load [? "type"]!=network_type_data)
    exit;

    
//Get The sender and the type of message
sender = async_load[? "ip"]+":"+string(async_load[? "port"]);
curMType = buffer_read(async_load[? "buffer"], buffer_u8);

switch(curMType){
    case PING:
        //Check if pinging or being pinged
        if(ds_map_exists(clients, sender)){
            if(buffer_read(async_load[? "buffer"], buffer_u8)==0){
                //Reply to ping
                buffer_seek(pingBuffer, buffer_seek_start, 0);
                buffer_write(pingBuffer, buffer_u8, PING );
                buffer_write(pingBuffer, buffer_u8, 1 );
                scr_sendMessageUdp(sender, pingBuffer);
            }
            else{
                //Update ping values
                var client = clients[? sender];
                client[? "pingTime"] = current_time-client[? "pingStart"];
                client[? "pingFail"] = 0;
                client[? "ping"] = true;
            }
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Clients in Lobby
if(state==LOBBY){
    
    switch(curMType){
        case CONNECT:
            if(!ds_map_exists(clients, sender)){
            
                //Add the sender to the client list
                var client = ds_map_create();
                client[? "name"] = buffer_read(async_load[? "buffer"], buffer_string);
                client[? "pingTime"] = 0;
                client[? "pingFail"] = 0;
                client[? "ready"] = false;
                ds_map_add_map(clients, sender, client);
                
                // Update Client List
                event_user(1);
                
                //Check if enough people are ready
                var ready = 0;
                if(serverReady)
                    ready++;
                for(var address=ds_map_find_first(clients);!is_undefined(address);address=ds_map_find_next(clients, address)){
                    var client = clients[? address];
                    if(client[? "ready"])
                        ready++;
                }
                obj_buttonMStart.disabled = !(ready&gt;=2 &amp;&amp; ready&gt;=ds_map_size(clients)+1);
            
            }
            break;
        case READY:
            if(ds_map_exists(clients, sender)){
            
                //Update the sender's ready state
                var client = clients[? sender];
                client[? "ready"] = !client[? "ready"];
                
                //Tell Client message was gotten
                buffer_seek(readyBuffer, buffer_seek_start, 0);
                buffer_write(readyBuffer, buffer_u8, READY);
                scr_sendMessageUdp(sender, readyBuffer);
                
                //Check if enough people are ready
                var ready = 0;
                if(serverReady)
                    ready++;
                for(var address=ds_map_find_first(clients);!is_undefined(address);address=ds_map_find_next(clients, address)){
                    var client = clients[? address];
                    if(client[? "ready"])
                        ready++;
                }
                obj_buttonMStart.disabled = !(ready&gt;=2 &amp;&amp; ready&gt;=ds_map_size(clients)+1);
                
            }
            break;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Clients in Game
if(state==GAME){
    
    switch(curMType){
        case UPDATE:
            var client = clients[? sender];
            var dead = client[? "dead"];
            if(!dead){
                var player = client[? "player"];
                var pX = buffer_read(async_load[? "buffer"], buffer_f32);
                var pY = buffer_read(async_load[? "buffer"], buffer_f32);
                player.newX = pX;
                player.newY = pY;
                var name = player.name;
                player.hspeed = buffer_read(async_load[? "buffer"], buffer_f32);
                player.vspeed = buffer_read(async_load[? "buffer"], buffer_f32);
                player.fuel = buffer_read(async_load[? "buffer"], buffer_f32);
                player.image_index = buffer_read(async_load[? "buffer"], buffer_u8);
                player.moveDir = buffer_read(async_load[? "buffer"], buffer_bool);
                if(player.hitPoints&lt;=0){
                    client[? "dead"] = true;
                    with(player) instance_destroy();
                    numPlayers--;
                    if(numPlayers==1){
                        show_message_async("Player "+obj_player.name+" wins!");
                        if(instance_number(obj_server)!=0){
                            with(obj_server){
                                state = NONE;
                                buffer_seek(endBuffer, buffer_seek_start, 0);
                                buffer_write(endBuffer, buffer_u8, END_GAME);
                                buffer_write(endBuffer, buffer_string, obj_player.name);
                                scr_sendMessageUdpAll(clients, endBuffer);
                            }
                        }
                        with(global.multiplayerGame) instance_destroy();
                        room_goto(rm_mainMenu);
                    }
                }
            }
            break;
        case SHOOT:
            var ballX = buffer_read(async_load[? "buffer"], buffer_f32);
            var ballY = buffer_read(async_load[? "buffer"], buffer_f32);
            var ball = instance_create(ballX, ballY, obj_ball);
            ball.hspeed = buffer_read(async_load[? "buffer"], buffer_f32);
            ball.vspeed = buffer_read(async_load[? "buffer"], buffer_f32);
            with(ball)
                if(!place_free(x, y))
                    instance_destroy();
            break;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Server IP
if ( ds_map_find_value(async_load, "status") == 0 ) {

    serverIP = ds_map_find_value(async_load, "result");

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Send Client List to Clients</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create and send Client List

// Create a message for the new list of clients
buffer_seek(infoBuffer, buffer_seek_start, 0);
buffer_write(infoBuffer, buffer_u8, CONNECT );
buffer_write(infoBuffer, buffer_u8, ds_map_size(clients)+1 );

// Get the Client names, address, and ping
var i = 0;
ds_list_clear(clientInfo);
var serverInfo = serverName+"&amp;"+serverIP+"&amp;0ms&amp;";
if(serverReady) serverInfo += "Yes";
else serverInfo += "No";
buffer_write(infoBuffer, buffer_string, serverInfo);
clientInfo[| i++] = serverInfo;
for(var address=ds_map_find_first(clients);!is_undefined(address);address=ds_map_find_next(clients, address)){
    var client = clients[? address];
    var info = client[? "name"]+"&amp;"+address+"&amp;"+string(client[? "pingTime"])+"ms&amp;";
    if(client[? "ready"]) info += "Yes";
    else info += "No";
    buffer_write(infoBuffer, buffer_string, info);
    clientInfo[| i++] = info;
}
buffer_write(infoBuffer, buffer_u8, 0);

// Send the message to all the clients
var playerNum = 0;
for(var address=ds_map_find_first(clients);!is_undefined(address);address=ds_map_find_next(clients, address)){
    var split = scr_splitString(address, ":");
    buffer_seek(infoBuffer, buffer_seek_relative, -1);
    buffer_write(infoBuffer, buffer_u8, playerNum++);
    network_send_udp(socketID, split[0], real(split[1]), infoBuffer, buffer_tell(infoBuffer) );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
