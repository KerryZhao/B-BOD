<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the Force Variables
moveMaxForce = 3;
moveForce = 0;
jumpForce = -60;
jetForce = -3;
fuelUseSpeed = 40;
shootForce = 50;
trapForce = 10;
shootCooldown = 250;
cooldown = 0;
image_speed = 0;

phy_fixed_rotation = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Aim and Move Variables
aimDistance = 30;
aimH = aimDistance;
aimV = 0;
moveDir = false;
animationFactor = 1/10;

//Aim drawing
aimHighlight = c_black;
aimHeadSize = 30;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Player Properties
depth = -1;
onGround = false;
controlThreshold = 0.2;
name = "Steve";
nameColor = c_black;
num = 0;
newY = -1;
newX = -1;
warpX = -1;
warpY = -1;
server = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Health Variables
maxHitPoints = 100;
hitPoints = maxHitPoints;
oldHitPoints = hitPoints;
healthPadding = 10;
healthThickness = 10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Jetpack Variables
maxFuel = 100;
fuel = maxFuel;
fuelPadding = 5;
fuelThickness = 5;
jetSound = 0;
jetpackUsed = false;
fuelRefillSpeed = 20;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Colors
playerColors[0] = c_red;
playerColors[1] = c_blue;
playerColors[2] = c_yellow;
playerColors[3] = c_lime;
playerColors[4] = c_white;
playerColors[5] = c_fuchsia;
playerColors[6] = c_purple;
playerColors[7] = c_aqua;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the Item variables
oLetter = "";
dLetter = "";
uLetter = "";
tLetter = "";
items[OFFENSE] = "";
items[DEFENSE] = "";
items[UTILITY] = "";
items[TRAP] = "";
curStation = 0;
fastShots = -1;
maxAmmo = 26;
maxAmmoRegen = 10;
ammo = maxAmmoRegen;
ammoRefillSpeed = 1;
itemTime = room_speed*5;
itemUse = false;
fuelUp = maxFuel*3/4;
telepad = -1;
maxTrapDist = 128;
mute = false;
shield = 0;
body = 0;
reflex = 0;
invincible = false;
guards = 0;
tempWalls = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset defense
shield = 0;
body = 0;
reflex = 0;
invincible = false;
if(guards!=0){
    for(var i=0;i&lt;array_length_1d(guards);i++)
        with(guards[i])
            instance_destroy();
    guards = 0;
}
if(tempWalls!=0){
    for(var i=0;i&lt;array_length_1d(tempWalls);i++)
        with(tempWalls[i])
            instance_destroy();
    tempWalls = 0;
}
items[DEFENSE] = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Continue Fast Shot
var xForce = aimH/aimDistance*shootForce;
var yForce = aimV/aimDistance*shootForce;
var ball = scr_shootBall(obj_ballSpecial, x+aimH*2, y+aimV*2, xForce*10, yForce*10);
ball.type = "F";
ball.phy_bullet = true;
if(fastShots&gt;0){
    fastShots--;
    alarm[1] = 2;
}
else
    items[OFFENSE] = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset player speed
moveMaxForce = 3;
jumpForce = -60;
jetForce = -3;
shootCooldown = 250;
mute = false;
if(itemUse){
    items[UTILITY] = "";
    itemUse = false;
}
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for new X and Y
if(newX!=-1){
    phy_position_x = newX;
    newX = -1;
}
if(newY!=-1){
    phy_position_y = newY;
    newY = -1;
}

if(warpX!=-1){
    phy_position_x = warpX;
    warpX = -1;
}
if(warpY!=-1){
    phy_position_y = warpY;
    warpY = -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Refill Fuel
if(!jetpackUsed){
  if(jetSound!=0){
    audio_stop_sound(jetSound);
    jetSound = 0;
  }
  if(onGround){
    if(fuel&lt;maxFuel)
        fuel += fuelRefillSpeed*delta_time/1000000;
    else
        fuel = maxFuel;
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Refill Ammo
if(ammo&lt;maxAmmoRegen)
    ammo += ammoRefillSpeed*delta_time/1000000;
else if(ammo&gt;maxAmmo)
    ammo = maxAmmo;
else
    ammo = floor(ammo);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Animation
if(phy_speed_x!=0)
    moveDir = sign(phy_speed_x)==-1;
if(onGround){
    if(floor(image_index)==5)
        image_index = 0;
    else if(phy_speed_x!=0)
        image_speed = abs(phy_speed_x)*delta_time/100000*animationFactor;
    else{
        image_index = 0;
        image_speed = 0;
    }
    if(floor(image_index)==3)
        image_index = 0;
}
else if(floor(image_index)!=5){
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if Client
if(instance_number(obj_client)&gt;0)
    exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jetpack
if(jetpackUsed &amp;&amp; fuel-fuelUseSpeed*delta_time/1000000&gt;0){
    fuel -= fuelUseSpeed*delta_time/1000000;
    physics_apply_local_impulse(0, 0, 0, jetForce);
    if(floor(image_index)!=5){
        image_index = 5;
        image_speed = 0;
    }
    if(jetSound==0 || !audio_is_playing(jetSound))
        jetSound = audio_play_sound_at(snd_jetpack, x, y, 0, 300, 100, 1, false, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move player
if(abs(moveForce)&lt;controlThreshold)
    moveForce = 0;
else{
    var totalForce = moveForce * moveMaxForce;
    if(onGround || !physics_test_overlap(x+sign(totalForce), y, 0, obj_obstacle))
        physics_apply_local_impulse(0, 0, totalForce, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check state
if(phy_speed_y!=0)
    onGround = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for damage reduction
if(invincible)
    hitPoints = oldHitPoints;
if(shield&gt;0){
    var damage = oldHitPoints-hitPoints;
    shield -= damage;
    if(shield&lt;=0){
        oldHitPoints += shield;
        alarm[2] = 1;
    }
    hitPoints = oldHitPoints;
}
if(body&gt;0){
    var damage = oldHitPoints-hitPoints;
    if(damage&gt;0){
        body--;
        if(body==0)
            alarm[2] = 1;
        hitPoints = oldHitPoints - 1;
    }
}
oldHitPoints = hitPoints;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Check if player dead</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>hitPoints&lt;=0  &amp;&amp; !server</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for Server end game
if(instance_number(obj_client)==0 &amp;&amp; instance_number(obj_player)&lt;=1){
    show_message_async("Player "+obj_player.name+" wins!");
    if(instance_number(obj_server)!=0){
        with(obj_server){
            state = NONE;
            buffer_seek(endBuffer, buffer_seek_start, 0);
            buffer_write(endBuffer, buffer_u8, END_GAME);
            buffer_write(endBuffer, buffer_string, obj_player.name);
            scr_sendMessageUdpAll(clients, endBuffer);
        }
    }
    with(global.multiplayerGame) instance_destroy();
    room_goto(rm_mainMenu);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump
if(onGround){
    physics_apply_local_impulse(0, 0, 0, jumpForce);
    onGround = false;
    image_index = 5;
    image_speed = 0;
    audio_play_sound_at(snd_jump, x, y, 0, 300, 100, 1, false, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Use item
if(items[curStation]=="" || mute)
    exit;

switch(curStation){
    case OFFENSE:
        var shot = false;
        var ball = -1;
        var xForce = aimH/aimDistance*shootForce;
        var yForce = aimV/aimDistance*shootForce;
        switch(items[curStation]){
        
            case "S": //Split ball
            case "W": //Warp ball
            case "T": //Time shot
            case "G": //Grounded shot
            case "E": //Explosion shot
            case "M": //Magnet shot
                ball = scr_shootBall(obj_ballSpecial, x+aimH*2, y+aimV*2, xForce, yForce);
                break;
            case "P": //Power ball
                ball = scr_shootBall(obj_ballSpecial, x+aimH*2, y+aimV*2, xForce/10, yForce/10);
                break;
            case "F": //Fast ball
                alarm[1] = 1;
                fastShots = 5;
                break;
            case "B": //Burst shot
                scr_shootBall(obj_ball, x-aimDistance*2, y, -shootForce, 0);
                scr_shootBall(obj_ball, x+aimDistance*2, y, shootForce, 0);
                scr_shootBall(obj_ball, x, y-aimDistance*2, 0, -shootForce);
                scr_shootBall(obj_ball, x, y+aimDistance*2, 0, shootForce);
                scr_shootBall(obj_ball, x-aimDistance, y-aimDistance, -shootForce/2, -shootForce/2);
                scr_shootBall(obj_ball, x-aimDistance, y+aimDistance, -shootForce/2, shootForce/2);
                scr_shootBall(obj_ball, x+aimDistance, y+aimDistance, shootForce/2, shootForce/2);
                scr_shootBall(obj_ball, x+aimDistance, y-aimDistance, shootForce/2, -shootForce/2);
                break;
        
        }
        
        //Set shot ball type
        if(ball!=-1)
           ball.type = items[curStation];
        
        //Check if item fully used
        if(ball!=-1 || items[curStation]=="B")
            items[curStation] = "";
        break;
    case DEFENSE:
        switch(items[curStation]){
            case "S":
                if(shield&lt;=0){
                    alarm[2] = itemTime;
                    shield = 10;
                }
                break;
            case "G":
                if(guards==0){
                    guards[0] = instance_create(0, 0, obj_guard);
                    guards[0].player = id;
                    guards[1] = instance_create(0, 0, obj_guard);
                    guards[1].player = id;
                    guards[1].relX = guards[1].maxX;
                    guards[1].relY = guards[1].maxY;
                    guards[1].dirX = -1;
                    guards[2] = instance_create(0, 0, obj_guard);
                    guards[2].player = id;
                    guards[2].relX = guards[1].maxX;
                    guards[2].dirX = 0;
                    guards[2].dirY = 1;
                    guards[3] = instance_create(0, 0, obj_guard);
                    guards[3].player = id;
                    guards[3].relY = guards[1].maxY;
                    guards[3].dirX = 0;
                    guards[3].dirY = -1;
                    alarm[2] = itemTime;
                }
                break;
            case "I":
                if(!invincible){
                    invincible = true;
                    alarm[2] = floor(itemTime/2);
                }
                break;
            case "E":
                items[DEFENSE] = "";
                instance_create(x, y, obj_emp);
                break;
            case "B":
                if(body&lt;=0){
                    alarm[2] = itemTime;
                    body = 3;
                }
                break;
            case "Q":
                if(reflex&lt;=0){
                    alarm[2] = itemTime;
                    reflex = 2;
                }
                break;
            case "W":
                if(tempWalls==0){
                    var snapX = floor(x/32)*32;
                    var snapY = floor(y/32)*32-32;
                    if(aimH&lt;0){
                        tempWalls[0] = instance_create(snapX-32, snapY, obj_tempWall);
                        tempWalls[1] = instance_create(snapX-32, snapY+32, obj_tempWall);
                    }
                    else{
                        tempWalls[0] = instance_create(snapX+32, snapY, obj_tempWall);
                        tempWalls[1] = instance_create(snapX+32, snapY+32, obj_tempWall);
                    }
                    alarm[2] = itemTime;
                }
        }
        break;
    case UTILITY:
        switch(items[curStation]){
            case "S":
                if(!itemUse){
                    moveMaxForce *= 2;
                    alarm[0] = itemTime;
                    itemUse = true;
                }
                break;
            case "F":
                items[curStation] = "";
                fuel += fuelUp;
                break;
            case "U":
                if(!itemUse){
                    jetForce *= 2;
                    alarm[0] = itemTime;
                    itemUse = true;
                }
                break;
            case "J3":
                items[curStation] = "J2";
                physics_apply_local_impulse(0, 0, 0, jumpForce*2);
                break;
            case "J2":
                items[curStation] = "J";
                physics_apply_local_impulse(0, 0, 0, jumpForce*2);
                break;
            case "J":
                items[curStation] = "";
                physics_apply_local_impulse(0, 0, 0, jumpForce*2);
                break;
            case "T":
                if(telepad==-1){
                    telepad = instance_create(x, y, obj_telepad);
                    telepad.color = color;
                }
                else{
                    items[curStation] = "";
                    warpX = telepad.x;
                    warpY = telepad.y;
                    with(telepad)
                        instance_destroy();
                    telepad = -1;
                }
                break;
            case "R":
                var empties = ds_list_create();
                if(items[OFFENSE]=="")
                    ds_list_add(empties, OFFENSE);
                if(items[DEFENSE]=="")
                    ds_list_add(empties, DEFENSE);
                if(items[TRAP]=="")
                    ds_list_add(empties, TRAP);
                if(ds_list_size(empties)&gt;0){
                    ds_list_shuffle(empties);
                    var station = empties[| 0];
                    var letter = irandom(array_length_2d(global.letters, station)-1);
                    items[station] = global.letters[station, letter];
                }
                ds_list_destroy(empties);
                items[curStation] = "";
                break;
            case "A":
                items[curStation] = "";
                ammo += 5;
                break;
        }
        break;
    case TRAP:
        switch(items[curStation]){
            case "F":
                var item = instance_nearest(x, y, obj_item);
                if(item!=noone &amp;&amp; point_distance(x, y, item.x, item.y)&lt;maxTrapDist){
                    items[curStation] = "";
                    if(!item.trap)
                        item.trap = true;
                }
                break;
            case "B":
            case "J":
            case "L":
            case "H":
            case "S":
            case "A":
                var trap = instance_create(x+aimH*3, y+aimV*3, obj_trap);
                trap.type = items[curStation];
                trap.tosser = id;
                var placed = true;
                with(trap){
                    if(physics_test_overlap(x, y, phy_rotation, obj_obstacle)){
                        instance_destroy();
                        placed = false;
                    }
                    else
                        physics_apply_force(other.x, other.y, other.aimH/other.aimDistance*other.trapForce, other.aimV/other.aimDistance*other.trapForce);
                }
                if(placed)
                    items[curStation] = "";
                break;
            case "T":
                var turret = instance_create(x+aimH*3, y+aimV*3, obj_turret);
                var placed = true;
                with(turret){
                    if(physics_test_overlap(x, y, phy_rotation, obj_obstacle)){
                        instance_destroy();
                        placed = false;
                    }
                    else
                        physics_apply_force(other.x, other.y, other.aimH/other.aimDistance*other.trapForce, other.aimV/other.aimDistance*other.trapForce);
                }
                if(placed)
                    items[curStation] = "";
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shoot a ball in the Aim Direction
if(!mute &amp;&amp; ammo&gt;=1){
    scr_shootBall(obj_ball, x+aimH*2, y+aimV*2, aimH/aimDistance*shootForce, aimV/aimDistance*shootForce);
    ammo--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Shield
if(shield&gt;0){
    draw_set_alpha(shield/10);
    draw_ellipse_colour(x-sprite_width*3/4, y-sprite_height*5/8, x+sprite_width*3/4, y+sprite_height*5/8, c_aqua, c_aqua, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Body Armor
if(body&gt;0){
    draw_set_alpha(body/3);
    draw_ellipse_colour(x-sprite_width*3/4, y-sprite_height*5/8, x+sprite_width*3/4, y+sprite_height*5/8, c_gray, c_gray, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Quick Reflexes
if(reflex&gt;0){
    draw_set_alpha(reflex/2);
    draw_ellipse_colour(x-sprite_width*3/4, y-sprite_height*5/8, x+sprite_width*3/4, y+sprite_height*5/8, c_purple, c_purple, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Self
color = playerColors[num];
var alpha = 1;
if(invincible)
    alpha = 0.5;
if(moveDir)
    draw_sprite_ext(sprite_index, -1, x, y, -1, 1, 0, color, alpha);
else
    draw_sprite_ext(sprite_index, -1, x, y, 1, 1, 0, color, alpha);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Player Name

//Draw the plate behind the name
var width = string_width(name);
var height = string_height(name);
draw_set_alpha(0.25);
draw_rectangle_colour(x-width/2, y-healthPadding-height-sprite_height/2, x+width/2, y-healthPadding-sprite_height/2, color, color, color, color, false);
draw_set_alpha(1);

//Draw the name
draw_set_halign(fa_center);
draw_set_valign(fa_bottom);
draw_text_colour(x, y-healthPadding-sprite_height/2, name, nameColor, nameColor, nameColor, nameColor, 1);
draw_set_valign(fa_top);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Health Bar
draw_healthbar(x-healthPadding-sprite_width/2, y+sprite_height/2+healthPadding, x+sprite_width/2+healthPadding, y+sprite_height/2+healthPadding+healthThickness, hitPoints/maxHitPoints*100, c_white, c_red, c_lime, 0, true, true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Fuel Bar
if(fuel!=maxFuel)
    draw_healthbar(x-fuelPadding-sprite_width/2, y+sprite_height/2+healthPadding+healthThickness+fuelPadding, x+sprite_width/2+fuelPadding, y+sprite_height/2+healthPadding+healthThickness+fuelPadding+fuelThickness, fuel/maxFuel*100, c_white, c_yellow, c_orange, 0, false, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>2</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.5</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
