<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Gamepad and Controls
gamepadSlot = 0;
moveAxis = gp_axislh;
jumpButtons[0] = gp_face1;
jumpButtons[1] = gp_shoulderlb;
jetButtons[0] = gp_face4;
jetButtons[1] = gp_shoulderl;
shootButtons[0] = gp_face3;
shootButtons[1] = gp_shoulderrb;
itemButtons[0] = gp_face2;
itemButtons[1] = gp_shoulderr;
offenseButtons[0] = gp_padu;
defenseButtons[0] = gp_padr;
utilityButtons[0] = gp_padl;
trapButtons[0] = gp_padd;
aimVAxis = gp_axisrv;
aimHAxis = gp_axisrh;

keyLeftButtons[0] = ord('A');
keyLeftButtons[1] = ord('J');
keyRightButtons[0] = ord('D');
keyRightButtons[1] = ord('L');
keyJumpButtons[0] = ord('W');
keyJumpButtons[1] = ord('I');
keyJetButtons[0] = vk_space;
keyShootButtons[0] = mb_left;
keyItemButtons[0] = mb_right;
keyOffenseButtons[0] = ord('1');
keyOffenseButtons[1] = ord('7');
keyUtilityButtons[0] = ord('2');
keyUtilityButtons[1] = ord('8');
keyDefenseButtons[0] = ord('3');
keyDefenseButtons[1] = ord('9');
keyTrapButtons[0] = ord('4');
keyTrapButtons[1] = ord('0');


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Aim Axis
var tempH;
var tempV;
if(gamepadSlot!=-1){
    tempH = gamepad_axis_value(gamepadSlot, aimHAxis);
    tempV = gamepad_axis_value(gamepadSlot, aimVAxis);
}
else{
    tempH = mouse_x-x;
    tempV = mouse_y-y;
}
if(abs(tempH)&gt;controlThreshold || abs(tempV)&gt;controlThreshold){
    var length = point_distance(0, 0, tempH, tempV);
    aimH = tempH/length*aimDistance;
    aimV = tempV/length*aimDistance;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Jump Button
var jump = false;
if(gamepadSlot!=-1){
    for(var i=0;i&lt;array_length_1d(jumpButtons) &amp;&amp; onGround &amp;&amp; !jump;i++)
        if(gamepad_button_check(gamepadSlot, jumpButtons[i]))
            jump = true;
}
else{
    for(var i=0;i&lt;array_length_1d(keyJumpButtons) &amp;&amp; onGround &amp;&amp; !jump;i++)
        if(keyboard_check(keyJumpButtons[i]))
            jump = true;
}

if(jump){
    if(instance_number(obj_client)&gt;0){
        //Send server message to jump
        var buffer = obj_client.readyBuffer;
        buffer_seek(buffer, buffer_seek_start, 0);
        buffer_write(buffer, buffer_u8, JUMP);
        network_send_udp(obj_client.socketID, obj_client.server, PORT, buffer, buffer_tell(buffer));
    }
    // jump
    event_user(2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Shoot Button
var shoot = false;
cooldown -= delta_time/1000;
if(gamepadSlot==-1){
    for(var i=0;i&lt;array_length_1d(keyShootButtons) &amp;&amp; cooldown&lt;=0 &amp;&amp; !shoot;i++)
        if(mouse_check_button(keyShootButtons[i]))
            shoot = true;
}
else{
    for(var i=0;i&lt;array_length_1d(shootButtons) &amp;&amp; cooldown&lt;=0 &amp;&amp; !shoot;i++)
        if(gamepad_button_check(gamepadSlot, shootButtons[i]))
            shoot = true;
}

if(shoot){
    if(instance_number(obj_client)&gt;0){
        //Send server message to shoot
        var buffer = obj_client.shootBuffer;
        buffer_seek(buffer, buffer_seek_start, 0);
        buffer_write(buffer, buffer_u8, SHOOT);
        buffer_write(buffer, buffer_f32, aimH);
        buffer_write(buffer, buffer_f32, aimV);
        network_send_udp(obj_client.socketID, obj_client.server, PORT, buffer, buffer_tell(buffer));
    }
    else{
        event_user(0);
    }
    cooldown = shootCooldown;
    audio_play_sound_at(snd_toss, x, y, 0, 300, 100, 1, false, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Jetpack Button
jetpackUsed = false;
if(gamepadSlot==-1){
    for(var i=0;i&lt;array_length_1d(keyJetButtons) &amp;&amp; fuel&gt;0 &amp;&amp; !jetpackUsed;i++)
        if(keyboard_check(keyJetButtons[i]))
            jetpackUsed = true;
}
else{
    for(var i=0;i&lt;array_length_1d(jetButtons) &amp;&amp; fuel&gt;0 &amp;&amp; !jetpackUsed;i++)
        if(gamepad_button_check(gamepadSlot, jetButtons[i]))
            jetpackUsed = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Move Axis
if(gamepadSlot!=-1)
    moveForce = gamepad_axis_value(gamepadSlot, moveAxis);
else{
    var left = false;
    var right = false;
    for(var i=0;i&lt;array_length_1d(keyLeftButtons) &amp;&amp; !left;i++)
        if(keyboard_check(keyLeftButtons[i]))
            left = true;
    for(var i=0;i&lt;array_length_1d(keyRightButtons) &amp;&amp; !right;i++)
        if(keyboard_check(keyRightButtons[i]))
            right = true;
    moveForce = right*1+left*-1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Use item
var itemUsed = false;
if(gamepadSlot==-1){
    for(var i=0;i&lt;array_length_1d(keyItemButtons) &amp;&amp; cooldown&lt;=0 &amp;&amp; !itemUsed;i++)
        if(mouse_check_button(keyItemButtons[i]))
            itemUsed = true;
}
else{
    for(var i=0;i&lt;array_length_1d(itemButtons) &amp;&amp; cooldown&lt;=0 &amp;&amp; !itemUsed;i++)
        if(gamepad_button_check(gamepadSlot, itemButtons[i]))
            itemUsed = true;
}

if(itemUsed){
    if(instance_number(obj_client)&gt;0){
        //Send server message to use item
        var buffer = obj_client.shootBuffer;
        buffer_seek(buffer, buffer_seek_start, 0);
        buffer_write(buffer, buffer_u8, ITEM);
        buffer_write(buffer, buffer_f32, aimH);
        buffer_write(buffer, buffer_f32, aimV);
        buffer_write(buffer, buffer_u8, curStation);
        network_send_udp(obj_client.socketID, obj_client.server, PORT, buffer, buffer_tell(buffer));
    }
    else{
        event_user(1);
    }
    cooldown = shootCooldown;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change Station
//Check for switch to offense
var oldStation = curStation;
if(gamepadSlot==-1){
    for(var i=0;items[OFFENSE]!="" &amp;&amp; i&lt;array_length_1d(keyOffenseButtons) &amp;&amp; curStation!=OFFENSE;i++)
        if(keyboard_check_released(keyOffenseButtons[i]))
            curStation = OFFENSE;
}
else{
    for(var i=0;items[OFFENSE]!="" &amp;&amp; i&lt;array_length_1d(offenseButtons) &amp;&amp; curStation!=OFFENSE;i++)
        if(gamepad_button_check_released(gamepadSlot, offenseButtons[i]))
            curStation = OFFENSE;
}
            
//Check for switch to utility           
if(gamepadSlot==-1){
    for(var i=0;items[UTILITY]!="" &amp;&amp; i&lt;array_length_1d(keyUtilityButtons) &amp;&amp; curStation!=UTILITY;i++)
        if(keyboard_check_released(keyUtilityButtons[i]))
            curStation = UTILITY;
}
else{
    for(var i=0;items[UTILITY]!="" &amp;&amp; i&lt;array_length_1d(utilityButtons) &amp;&amp; curStation!=UTILITY;i++)
        if(gamepad_button_check_released(gamepadSlot, utilityButtons[i]))
            curStation = UTILITY;
}
            
//Check for switch to defense    
if(gamepadSlot==-1){
    for(var i=0;items[DEFENSE]!="" &amp;&amp; i&lt;array_length_1d(keyDefenseButtons) &amp;&amp; curStation!=DEFENSE;i++)
        if(keyboard_check_released(keyDefenseButtons[i]))
            curStation = DEFENSE;
}
else{
    for(var i=0;items[DEFENSE]!="" &amp;&amp; i&lt;array_length_1d(defenseButtons) &amp;&amp; curStation!=DEFENSE;i++)
        if(gamepad_button_check_released(gamepadSlot, defenseButtons[i]))
            curStation = DEFENSE;
}
            
//check for switch to trap        
if(gamepadSlot==-1){
    for(var i=0;items[TRAP]!="" &amp;&amp; i&lt;array_length_1d(keyTrapButtons) &amp;&amp; curStation!=TRAP;i++)
        if(keyboard_check_released(keyTrapButtons[i]))
            curStation = TRAP;
}
else{
    for(var i=0;items[TRAP]!="" &amp;&amp; i&lt;array_length_1d(trapButtons) &amp;&amp; curStation!=TRAP;i++)
        if(gamepad_button_check_released(gamepadSlot, trapButtons[i]))
            curStation = TRAP;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check state
jetpackUsed = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the Aim Arrow
/*var x1 = x+aimH;
var x2 = x+aimH*2;
var y1 = y+aimV;
var y2 = y+aimV*2;
x3 = x2+((x1-x2)*cos(pi/12)+(y1-y2)*sin(pi/12))*aimHeadSize/aimDistance;
y3 = y2+((y1-y2)*cos(pi/12)-(x1-x2)*sin(pi/12))*aimHeadSize/aimDistance;
x4 = x2+((x1-x2)*cos(pi/12)-(y1-y2)*sin(pi/12))*aimHeadSize/aimDistance;
y4 = y2+((y1-y2)*cos(pi/12)+(x1-x2)*sin(pi/12))*aimHeadSize/aimDistance;
draw_triangle_colour(x3, y3, x2, y2, x4, y4, color, color, color, false);
draw_triangle_colour(x3, y3, x2, y2, x4, y4, aimHighlight, aimHighlight, aimHighlight, true);
*/
scr_drawTriangle(x+aimH, y+aimV, x+aimH*2, y+aimV*2, aimHeadSize, pi/12, color, aimHighlight);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>2.5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
