<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Gamepad and Controls
gamepadSlot = 0;
moveAxis = gp_axislh;
jumpButtons[0] = gp_face1;
jumpButtons[1] = gp_shoulderlb;
jetButtons[0] = gp_face4;
jetButtons[1] = gp_shoulderl;
jetButtons[2] = gp_shoulderr;
shootButtons[0] = gp_face3;
shootButtons[1] = gp_shoulderrb;
aimVAxis = gp_axisrv;
aimHAxis = gp_axisrh;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Aim Axis
var tempH;
var tempV;
if(gamepadSlot!=-1){
    tempH = gamepad_axis_value(gamepadSlot, aimHAxis);
    tempV = gamepad_axis_value(gamepadSlot, aimVAxis);
}
else{
    tempH = mouse_x-x;
    tempV = mouse_y-y;
}
if(abs(tempH)&gt;controlThreshold || abs(tempV)&gt;controlThreshold){
    var length = point_distance(0, 0, tempH, tempV);
    aimH = tempH/length*aimDistance;
    aimV = tempV/length*aimDistance;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Jump Button
for(var i=0;i&lt;array_length_1d(jumpButtons) &amp;&amp; onGround;i++){
    if(((gamepadSlot!=-1 &amp;&amp; gamepad_button_check(gamepadSlot, jumpButtons[i])) || 
        (gamepadSlot==-1 &amp;&amp; (keyboard_check(ord('W')) || keyboard_check(ord('I'))))) &amp;&amp; onGround){
        event_user(1);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Shoot Button
cooldown -= delta_time/1000;
for(var i=0;i&lt;array_length_1d(shootButtons);i++){
    if(((gamepadSlot!=-1 &amp;&amp; gamepad_button_check(gamepadSlot, shootButtons[i])) || 
        (gamepadSlot==-1 &amp;&amp; mouse_check_button(mb_left))) &amp;&amp; cooldown&lt;=0){
        if(instance_number(obj_client)&gt;0){
            //Send server message to shoot
            var buffer = obj_client.shootBuffer;
            buffer_seek(buffer, buffer_seek_start, 0);
            buffer_write(buffer, buffer_u8, SHOOT);
            buffer_write(buffer, buffer_f32, x+aimH*2);
            buffer_write(buffer, buffer_f32, y+aimV*2);
            buffer_write(buffer, buffer_f32, aimH/aimDistance*shootForce);
            buffer_write(buffer, buffer_f32, aimV/aimDistance*shootForce);
            network_send_udp(obj_client.socketID, obj_client.server, PORT, buffer, buffer_tell(buffer));
        }
        else
            event_user(0);
        cooldown = shootCooldown;
        audio_play_sound_at(snd_toss, x, y, 0, 300, 100, 1, false, 1);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Jetpack Button
var jetpackUsed = false;
for(var i=0;i&lt;array_length_1d(jetButtons) &amp;&amp; fuel&gt;0 &amp;&amp; !jetpackUsed;i++){
    if((gamepadSlot!=-1 &amp;&amp; gamepad_button_check(gamepadSlot, jetButtons[i])) ||
        (gamepadSlot==-1 &amp;&amp; keyboard_check(vk_space))){
        event_user(2);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Move Axis
var moveForce;
if(gamepadSlot!=-1)
    moveForce = gamepad_axis_value(gamepadSlot, moveAxis);
else
    moveForce = (keyboard_check(ord('D')) || keyboard_check(ord('L')))*1+(keyboard_check(ord('A')) || keyboard_check(ord('J')))*-1;
if(abs(moveForce)&lt;controlThreshold)
    moveForce = 0;
else{
    moveForce *= moveMaxForce;
    if(onGround || !physics_test_overlap(x+sign(moveForce), y, 0, obj_obstacle))
        physics_apply_local_impulse(0, 0, moveForce, 0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Animation
if(phy_speed_x!=0)
    moveDir = sign(phy_speed_x)==-1;
if(onGround){
    if(floor(image_index)==5)
        image_index = 0;
    else if(phy_speed_x!=0)
        image_speed = abs(phy_speed_x)*delta_time/100000*animationFactor;
    else{
        image_index = 0;
        image_speed = 0;
    }
    if(floor(image_index)==3)
        image_index = 0;
}
else if(floor(image_index)!=5){
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the Aim Arrow
/*var x1 = x+aimH;
var x2 = x+aimH*2;
var y1 = y+aimV;
var y2 = y+aimV*2;
x3 = x2+((x1-x2)*cos(pi/12)+(y1-y2)*sin(pi/12))*aimHeadSize/aimDistance;
y3 = y2+((y1-y2)*cos(pi/12)-(x1-x2)*sin(pi/12))*aimHeadSize/aimDistance;
x4 = x2+((x1-x2)*cos(pi/12)-(y1-y2)*sin(pi/12))*aimHeadSize/aimDistance;
y4 = y2+((y1-y2)*cos(pi/12)+(x1-x2)*sin(pi/12))*aimHeadSize/aimDistance;
draw_triangle_colour(x3, y3, x2, y2, x4, y4, color, color, color, false);
draw_triangle_colour(x3, y3, x2, y2, x4, y4, aimHighlight, aimHighlight, aimHighlight, true);
*/
scr_drawTriangle(x+aimH, y+aimV, x+aimH*2, y+aimV*2, aimHeadSize, pi/12, color, aimHighlight);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>2.5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>26,0</point>
    <point>26,48</point>
    <point>0,48</point>
  </PhysicsShapePoints>
</object>
